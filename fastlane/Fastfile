desc "Start new framework release version on your git repository"
desc "This lane require **git flow** installed in your framework directory check documentation [here](https://github.com/nvie/gitflow)"
desc "You will automatically be switched to release/X.X.X branch after this lane and your project/podsec version will be updated"
desc "####Example using specific version:"
desc "```\nfastlane start_framework_release version:4.0.9\n```"
desc "####Options"
desc "* **bump_type**: The type of this version bump. Available: patch, minor, major"
desc "  * **environment_variable**: DG_BUMP_TYPE"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "  * **default_value**: patch"
desc "* **version**: Change to a specific version. This will replace the bump type value"
desc "  * **environment_variable**: DG_RELEASE_VERSION"
desc "  * **type**: string"
desc "  * **optional**: true, **automatically patch** release version to the next number (1.0.0 --> 1.0.1)"
desc "* **project**: The project path."
desc "  * **environment_variable**: DG_PROJECT"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **podspec_path**: The podspec path if specific."
desc "  * **environment_variable**: DG_PODSPEC_PATH"
desc "  * **type**: string"
desc "  * **optional**: true"
desc ""
lane :start_framework_release do |options|
  ensure_git_status_clean()
  prepare_lane_options(
    options: options,
    mapping: {
      :version => {:env_var => "DG_RELEASE_VERSION"},
      :podspec_path => {:env_var => "DG_PODSPEC_PATH"},
      :project => {:env_var => "DG_PROJECT"},
      :product_name => {:env_var => "DG_PRODUCT_NAME"},
      :bump_type => {:env_var => "DG_BUMP_TYPE"},
      :release_url => {:env_var => "DG_RELEASE_URL"},
      :change_log => {:env_var => "DG_CHANGELOG_CONTENT"}
    }
  )
  release_version = options[:version]
  bump_type = options[:bump_type]
  if release_version == nil
    version_number = get_version_number(xcodeproj: options[:project])
    version_number_arr = version_number.split(".").map(&:to_i)
    if version_number_arr.length >= 2
      if bump_type == nil || bump_type == "patch"
        version_number_arr[2] = version_number_arr[2] + 1
      elsif bump_type == "minor"
        version_number_arr[1] = version_number_arr[1] + 1
      elsif bump_type == "major"
        version_number_arr[0] = version_number_arr[0] + 1
      else
        UI.user_error! "Invalid bump type '#{bump_type}', only patch, minor, major are available"
      end
      release_version = version_number_arr.join(".")
    else
      UI.user_error! "The project version is invalid '#{version_number}'"
    end
  end
  git_flow_release(
    action: "start",
    name: release_version
  )
  increment_version_number(
    xcodeproj: options[:project],
    version_number: release_version
  )
  version_bump_podspec(
    path: options[:podspec_path],
    version_number: release_version
  )
  git_commit(
    path: ["."],
    message: "Bumped release version #{release_version}"
  )
  git_flow_release(
    action: "publish",
    name: release_version
  )
  remote_info = git_get_remote_info()
  if options[:product_name] == nil
    if path = remote_info[:path]
      if i = path.rindex("/")
        options[:product_name] = path.slice(i + 1, path.length - i - 1)
      end
    end
  end
  if options[:change_log] == nil
    options[:change_log] = changelog_from_git_commits()
  end
  if options[:release_url] == nil
    host = remote_info[:host]
    path = remote_info[:path]
    if host == "github.com" && path != nil
      options[:release_url] = "https://#{host}/#{path}/releases/tag/v#{release_version}"
    end
  end
  if options[:product_name]
    new_changelog_version(
      version: release_version,
      product_name: options[:product_name],
      url: options[:release_url]
      content: options[:change_log]
    )
  end
  UI.success "Release #{release_version} created"
end

desc "Submit the framework release version on your git repository and close the branch"
desc "This lane require **git flow** installed in your framework directory check documentation [here](https://github.com/nvie/gitflow)"
desc "You will automatically be switched to develop branch after this lane"
desc "####How to install ?"
desc "This lane require the `tests` lane define in [Digipolitan/fastlane-ios-common](https://github.com/Digipolitan/fastlane-ios-common)"
desc "```\nimport_from_git(\n  url: 'https://github.com/Digipolitan/fastlane-ios-common'\n)\n```"
desc "####Options"
desc "* **message**: The commit message"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "  * **default_value**: Release version **VERSION**"
desc "* **workspace**: The workspace to use."
desc "  * **environment_variable**: DG_WORKSPACE"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **project**: The project path."
desc "  * **environment_variable**: DG_PROJECT"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **scheme**: The scheme into the workspace to test."
desc "  * **environment_variable**: DG_SCHEME"
desc "  * **type**: string"
desc "  * **optional**: true"
desc ""
lane :submit_framework_release do |options|
  ensure_git_status_clean()
  prepare_lane_options(
    options: options,
    mapping: {
      :project => {:env_var => "DG_PROJECT"},
      :message => {:env_var => "DG_RELEASE_MESSAGE"}
    }
  )
  tests(
    workspace: options[:workspace],
    project: options[:project],
    scheme: options[:scheme],
    skip_slack:true
  )
  release_version = get_version_number(xcodeproj: options[:project])
  message = options[:message] != nil ? options[:message] : "Release version #{release_version}"
  git_flow_release(
    action: "finish",
    name: release_version,
    message: message
  )
  UI.success "Successfully submitted framework v#{release_version} to your repository"
end

desc "CocoaPods deployment lane"
desc "This lane must be run only on the **master** branch"
desc "####Options"
desc "* **podspec_path**: The podspec path"
desc "  * **environment_variable**: DG_PODSPEC_PATH"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "####Environment variables"
desc "* **COCOAPODS_TRUNK_TOKEN**: The CocoaPods access token use to push the release to CocoaPods, check below how to retrieve CocoaPods token"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "####Output context variables"
desc "* **DG_COCOAPODS_RELEASE_LINK**: The CocoaPods release link"
desc "  * **type**: string"
desc "####How to retrieve CocoaPods Trunk Token ?"
desc "First setup your CocoaPods trunk [as follow](https://guides.cocoapods.org/making/getting-setup-with-trunk.html)"
desc "After that run this command :"
desc "```\ngrep -A2 'trunk.cocoapods.org' ~/.netrc\n```"
desc "The output sould be something like this :"
desc "```\nmachine trunk.cocoapods.org\n  login user@example.com\n  password XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n```"
desc "The password `XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX` is your CocoaPods trunk token"
desc ""
lane :framework_deploy_cocoapods do |options|
  if git_branch() != "master"
    UI.user_error! "Run this lane only on a master branch"
  end
  if ENV["CI"] == true && ENV["COCOAPODS_TRUNK_TOKEN"] == nil
    UI.user_error! "COCOAPODS_TRUNK_TOKEN not found in the CI environment"
  end
  prepare_lane_options(
    options: options,
    mapping: {
      :podspec_path => {:env_var => "DG_PODSPEC_PATH"}
    }
  )
  pod_push(
    path: options[:podspec_path],
    allow_warnings: true,
    verbose: true
  )
  podspec = read_podspec(
    path: options[:podspec_path]
  )
  pod_name = podspec["name"]
  lane_context[:DG_COCOAPODS_RELEASE_LINK] = "https://cocoapods.org/pods/#{pod_name}"
end

desc "GitHub deployment lane"
desc "This lane must be run only on the **master** branch"
desc "####Options"
desc "* **token**: The GitHub access token use to push the release to GitHub, check how to generate access token [here](https://help.github.com/articles/creating-an-access-token-for-command-line-use/)"
desc "  * **environment_variable**: GITHUB_TOKEN"
desc "  * **type**: string"
desc "  * **optional**: false"
desc "* **repository_name**: The GitHub repository name such as 'company/project'"
desc "  * **environment_variable**: GITHUB_REPOSITORY_NAME"
desc "  * **type**: string"
desc "  * **optional**: false"
desc "* **project**: Your xcodeproj path"
desc "  * **environment_variable**: DG_PROJECT"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **skip_carthage**: Skip the carthage asset to the GitHub release"
desc "  * **type**: boolean"
desc "  * **optional**: true"
desc "  * **default_value**: false"
lane :framework_deploy_github do |options|
  if git_branch() != "master"
    UI.user_error! "Run this lane only on a master branch"
  end
  prepare_lane_options(
    options: options,
    mapping: {
      :token => {:env_var => "GITHUB_TOKEN"},
      :repository_name => {:env_var => "GITHUB_REPOSITORY_NAME"},
      :project => {:env_var => "DG_PROJECT"}
    },
    required_keys: [
      :token,
      :repository_name
    ]
  )
  version_number = get_version_number(xcodeproj: options[:project])
  tag_name = "v#{version_number}"
  github_assets = []
  if options[:skip_carthage] != true
    if files = files_matching(pattern: "*.framework.zip", basename: false)
      files.each { |f|
        github_assets.push(f)
      }
    else
      UI.error "No carthage framework found you must build using 'carthage' action"
    end
  end
  set_github_release(
    repository_name: options[:repository_name],
    name: version_number,
    api_token: options[:token],
    tag_name: tag_name,
    description: changelog_from_git_commits(),
    commitish: "master",
    upload_assets: github_assets
  )
  Actions.sh("curl -s https://codecov.io/bash | bash")
end
