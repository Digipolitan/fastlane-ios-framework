lane :bootstrap do |options|
  prepare_lane_options(
    options: options,
    mapping: {
      :xcodeproj => {:env_var => "XCODEPROJ"},
      :xcworkspace => {:env_var => "XCWORKSPACE"},
      :podspec => {:env_var => "PODSPEC"}
    }
  )
  appfile_init(
    xcodeproj: options[:xcodeproj],
    fetch_app_identifier: 1,
    fetch_apple_id: 0,
    fetch_team_name: 0,
    fetch_itc_team_name: 0
  )
  if UI.confirm("Would you like to reset the project's version ?")
    increment_version_number(
      xcodeproj: options[:xcodeproj],
      version_number: "1.0.0"
    )
    increment_build_number(
      xcodeproj: options[:xcodeproj],
      build_number: "1"
    )
  end
  if UI.confirm("Would you like to edit the project's configuration ?")
    project_info = get_project_info(xcodeproj: options[:xcodeproj])
    if framework_name = project_info[:name]
      podspec_info = {}
      if remote_info = git_get_remote_info()
        podspec_info[:host] = remote_info[:host]
        if path = remote_info[:path]
          podspec_info[:homepage] = "https://#{podspec_info[:host]}/#{path}"
          podspec_info[:git_url] = "#{podspec_info[:homepage]}.git"
          if i = path.index('/')
            podspec_info[:company] = path[0, i]
            i += 1
            podspec_info[:identifier] = path[i, path.length - i]
          end
        end
      end
      user_validation(
        fields: [{
          name: "Git URL",
          value: podspec_info[:git_url],
          lane_context: :PODSPEC_GIT_URL,
          optional: false
        }, {
          name: "Homepage",
          value: podspec_info[:homepage],
          lane_context: :PODSPEC_HOMEPAGE
        }, {
          name: "Company",
          value: podspec_info[:company],
          lane_context: :PODSPEC_COMPANY
        }, {
          name: "Project identifier",
          value: podspec_info[:identifier],
          lane_context: :PODSPEC_IDENTIFIER,
          optional: false
        }]
      )
      ios = UI.confirm("Is your framework compatible iOS ?") ? '8.0' : nil
      watchos = UI.confirm("Is your framework compatible wathOS ?") ? '2.0' : nil
      tvos = UI.confirm("Is your framework compatible tvOS ?") ? '9.0' : nil
      osx = UI.confirm("Is your framework compatible OSX ?") ? '10.9' : nil
      authors = []
      if company = Actions.lane_context[:PODSPEC_COMPANY]
        authors.push(company)
      end
      podspec_init(
        podspec: options[:podspec],
        pod_name: framework_name,
        version: get_version_number(
          xcodeproj: project_info[:xcodeproj]
        ),
        summary: "This is a summary.",
        homepage: Actions.lane_context[:PODSPEC_HOMEPAGE],
        git_url: Actions.lane_context[:PODSPEC_GIT_URL],
        authors: authors,
        ios_deployment_target: ios,
        osx_deployment_target: osx,
        tvos_deployment_target: tvos,
        watchos_deployment_target: watchos
      )
      podfile_init(
        xcodeproj: project_info[:xcodeproj],
        ios_deployment_target: ios,
        osx_deployment_target: osx,
        tvos_deployment_target: tvos,
        watchos_deployment_target: watchos
      )
      clean_xcodeproj_configuration(
        xcodeproj: project_info[:xcodeproj],
        ios_available: ios != nil,
        watchos_available: watchos != nil,
        tvos_available: tvos != nil,
        osx_available: osx != nil
      )
      clean_xcworkspace_configuration(
        xcworkspace: options[:xcworkspace],
        ios_available: ios != nil,
        watchos_available: watchos != nil,
        tvos_available: tvos != nil,
        osx_available: osx != nil
      )
    else
      UI.user_error! "No project found"
    end
  end
  UI.success "Framework successfully initialized"
end

desc "Start new framework release version on your git repository"
desc "This lane require **git flow** installed in your framework directory check documentation [here](https://github.com/nvie/gitflow)"
desc "You will automatically be switched to release/X.X.X branch after this lane and your project/podsec version will be updated"
desc "#### How to install ?"
desc "This lane require actions define in [Digipolitan/fastlane-common](https://github.com/Digipolitan/fastlane-common)"
desc "```\nimport_from_git(\n  url: 'https://github.com/Digipolitan/fastlane-common'\n)\n```"
desc "#### Example using specific version:"
desc "```\nfastlane start_framework_release version:4.0.9\n```"
desc "#### Options"
desc "* **bump_type**: The type of this version bump. Available: patch, minor, major"
desc "  * **environment_variable**: DG_BUMP_TYPE"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "  * **default_value**: patch"
desc "* **version**: Change to a specific version. This will replace the bump type value"
desc "  * **environment_variable**: DG_RELEASE_VERSION"
desc "  * **type**: string"
desc "  * **optional**: true, **automatically patch** release version to the next number (1.0.0 --> 1.0.1)"
desc "* **project**: The project path."
desc "  * **environment_variable**: DG_PROJECT"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **podspec_path**: The podspec path if specific."
desc "  * **environment_variable**: DG_PODSPEC_PATH"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **product_name**: The framework name"
desc "  * **environment_variable**: DG_PRODUCT_NAME"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **release_url**: The release url use by the changelog"
desc "  * **environment_variable**: DG_RELEASE_URL"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **change_log**: The changelog content"
desc "  * **environment_variable**: DG_CHANGELOG_CONTENT"
desc "  * **type**: string"
desc "  * **optional**: true"
desc ""
lane :start_framework_release do |options|
  prepare_for_release(options)
  current_version_number = lane_context[SharedValues::VERSION_NUMBER]
  current_build_number = lane_context[SharedValues::BUILD_NUMBER]
  version_number = lane_context[SharedValues::NEXT_VERSION_NUMBER]
  build_number = lane_context[SharedValues::NEXT_BUILD_NUMBER]
  begin
    git_flow_release(
      action: "start",
      name: version_number
    )
  rescue
    UI.user_error! "Cannot start release '#{version_number}', you are probably starting the current release version\n\
    * if you want to publish the release use the lane : 'publish_framework_release'"
  end
  prepare_lane_options(
    options: options,
    mapping: {
      :version => {:env_var => "DG_RELEASE_VERSION"},
      :podspec_path => {:env_var => "DG_PODSPEC_PATH"},
      :project => {:env_var => "DG_PROJECT"},
      :product_name => {:env_var => "DG_PRODUCT_NAME"},
      :release_url => {:env_var => "DG_RELEASE_URL"},
      :change_log => {:env_var => "DG_CHANGELOG_CONTENT"}
    }
  )
  if current_version_number != version_number || current_build_number != build_number
    increment_version_number(
      xcodeproj: options[:project],
      version_number: version_number
    )
    increment_build_number(
      xcodeproj: options[:project],
      build_number: build_number
    )
    version_bump_podspec(
      path: options[:podspec_path],
      version_number: version_number
    )
    git_commit(
      path: ["."],
      message: "Bumped release version '#{version_number}' build ##{build_number}"
    )
  end
  git_flow_release(
    action: "publish",
    name: version_number
  )
  remote_info = git_get_remote_info()
  if options[:product_name] == nil
    if path = remote_info[:path]
      if i = path.rindex("/")
        options[:product_name] = path.slice(i + 1, path.length - i - 1)
      end
    end
  end
  if options[:change_log] == nil
    options[:change_log] = changelog_from_git_commits()
  end
  if options[:release_url] == nil
    host = remote_info[:host]
    path = remote_info[:path]
    if host == "github.com" && path != nil
      options[:release_url] = "https://#{host}/#{path}/releases/tag/v#{version_number}"
    end
  end
  if options[:product_name] != nil
    new_changelog_version(
      version: version_number,
      product_name: options[:product_name],
      url: options[:release_url],
      content: options[:change_log]
    )
  end
  UI.success "Release #{version_number} created.\nCheck the readme.md and the CHANGELOG.md after that when your framework is ready execute the lane 'publish_framework_release'"
end

desc "Submit the framework release version on your git repository and close the branch"
desc "This lane require **git flow** installed in your framework directory check documentation [here](https://github.com/nvie/gitflow)"
desc "You will automatically be switched to develop branch after this lane"
desc "#### How to install ?"
desc "This lane require actions define in [Digipolitan/fastlane-common](https://github.com/Digipolitan/fastlane-common)"
desc "```\nimport_from_git(\n  url: 'https://github.com/Digipolitan/fastlane-common'\n)\n```"
desc "#### Options"
desc "* **message**: The commit message"
desc "  * **environment_variable**: DG_RELEASE_MESSAGE"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "  * **default_value**: Release version **VERSION**"
desc "* **workspace**: The workspace to use."
desc "  * **environment_variable**: DG_WORKSPACE"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **project**: The project path."
desc "  * **environment_variable**: DG_PROJECT"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **scheme**: The scheme into the workspace to test."
desc "  * **environment_variable**: DG_SCHEME"
desc "  * **type**: string"
desc "  * **optional**: true"
desc ""
lane :publish_framework_release do |options|
  ensure_git_status_clean()
  ensure_git_flow_init()
  prepare_lane_options(
    options: options,
    mapping: {
      :workspace => {:env_var => "DG_WORKSPACE"},
      :project => {:env_var => "DG_PROJECT"},
      :scheme => {:env_var => "DG_SCHEME"},
      :message => {:env_var => "DG_RELEASE_MESSAGE"}
    }
  )
  version_number = get_version_number(xcodeproj: options[:project])
  if changelog = get_changelog()
    UI.message "Check your change log content below :\n#{changelog}"
    if !UI.confirm("Are you sure to submit the framework v#{version_number} with this changelog ?")
      UI.user_error! "User abort framework release"
    end
  elsif !UI.confirm("Missing changelog content ! Continue ?")
    UI.user_error! "User abort framework release"
  end
  scan(
    workspace: options[:workspace],
    project: options[:project],
    scheme: options[:scheme],
    skip_slack:true
  )
  message = options[:message] != nil ? options[:message] : "#{version_number}"
  git_flow_release(
    action: "finish",
    name: version_number,
    message: message
  )
  UI.success "Successfully submitted framework v#{version_number} to your repository"
end

desc "CocoaPods deployment lane"
desc "This lane must be run only on the **master** branch"
desc "#### Options"
desc "* **podspec_path**: The podspec path"
desc "  * **environment_variable**: DG_PODSPEC_PATH"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "#### CI Environment variables"
desc "* **COCOAPODS_TRUNK_TOKEN**: The CocoaPods access token use to push the release to CocoaPods, check below how to retrieve CocoaPods token"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "#### Output context variables"
desc "* **DG_COCOAPODS_RELEASE_LINK**: The CocoaPods release link"
desc "  * **type**: string"
desc "#### How to retrieve CocoaPods Trunk Token ?"
desc "First setup your CocoaPods trunk [as follow](https://guides.cocoapods.org/making/getting-setup-with-trunk.html)"
desc "After that run this command :"
desc "```\ngrep -A2 'trunk.cocoapods.org' ~/.netrc\n```"
desc "The output sould be something like this :"
desc "```\nmachine trunk.cocoapods.org\n  login user@example.com\n  password XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n```"
desc "The password `XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX` is your CocoaPods trunk token"
desc ""
lane :framework_deploy_cocoapods do |options|
  master_branch = git_get_master_branch()
  if git_branch() != master_branch
    UI.user_error! "Run this lane only on a #{master_branch} branch"
  end
  if ENV["CI"] == true && ENV["COCOAPODS_TRUNK_TOKEN"] == nil
    UI.user_error! "COCOAPODS_TRUNK_TOKEN not found in the CI environment"
  end
  prepare_lane_options(
    options: options,
    mapping: {
      :podspec_path => {:env_var => "DG_PODSPEC_PATH"}
    }
  )
  pod_push(
    path: options[:podspec_path],
    allow_warnings: true,
    verbose: true
  )
  podspec = read_podspec(
    path: options[:podspec_path]
  )
  pod_name = podspec["name"]
  lane_context[:DG_COCOAPODS_RELEASE_LINK] = "https://cocoapods.org/pods/#{pod_name}"
end

desc "GitHub deployment lane"
desc "This lane must be run only on the **master** branch"
desc "#### Options"
desc "* **token**: The GitHub access token use to push the release to GitHub, check how to generate access token [here](https://help.github.com/articles/creating-an-access-token-for-command-line-use/)"
desc "  * **environment_variable**: GITHUB_TOKEN"
desc "  * **type**: string"
desc "  * **optional**: false"
desc "* **repository_name**: The GitHub repository name such as 'company/project'"
desc "  * **environment_variable**: GITHUB_REPOSITORY_NAME"
desc "  * **type**: string"
desc "  * **optional**: false"
desc "* **project**: Your xcodeproj path"
desc "  * **environment_variable**: DG_PROJECT"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* **skip_carthage**: Skip the carthage asset to the GitHub release"
desc "  * **type**: boolean"
desc "  * **optional**: true"
desc "  * **default_value**: false"
lane :framework_deploy_github do |options|
  master_branch = git_get_master_branch()
  if git_branch() != master_branch
    UI.user_error! "Run this lane only on a #{master_branch} branch"
  end
  prepare_lane_options(
    options: options,
    mapping: {
      :token => {:env_var => "GITHUB_TOKEN"},
      :repository_name => {:env_var => "GITHUB_REPOSITORY_NAME"},
      :project => {:env_var => "DG_PROJECT"}
    },
    required_keys: [
      :token,
      :repository_name
    ]
  )
  version_number = get_version_number(xcodeproj: options[:project])
  tag_name = "v#{version_number}"
  github_assets = []
  if options[:skip_carthage] != true
    if files = files_matching(pattern: "*.framework.zip", basename: false)
      files.each { |f|
        github_assets.push(f)
      }
    else
      UI.message "No carthage framework found you must build using 'carthage' action"
    end
  end
  changelog = get_changelog()
  if changelog == nil
    changelog = changelog_from_git_commits()
  end
  set_github_release(
    repository_name: options[:repository_name],
    name: version_number,
    api_token: options[:token],
    tag_name: tag_name,
    description: changelog,
    commitish: master_branch,
    upload_assets: github_assets
  )
  Actions.sh("curl -s https://codecov.io/bash | bash")
end
